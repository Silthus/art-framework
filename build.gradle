buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'kr.entree.spigradle' version '1.2.1' apply false
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
    id "de.marcphilipp.nexus-publish" version "0.4.0"
    id 'io.codearte.nexus-staging' version '0.21.2'
}

subprojects {
    repositories {
        mavenCentral()
        jcenter()

        maven {
            name = 'Spigot'
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

            content {
                includeGroup 'org.bukkit'
                includeGroup 'org.spigotmc'
            }
        }

        maven {
            name = "github"
            url = 'https://maven.pkg.github.com/Silthus/ConfigLib'
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    }

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.johnrengelman.shadow'

    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/publish.gradle"

    sourceCompatibility = 11
    targetCompatibility = 11

    dependencies {
        compile 'org.projectlombok:lombok:1.+'
        annotationProcessor 'org.projectlombok:lombok:1.+'

        api group: 'com.google.inject', name: 'guice', version: '4.2.3'
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

        //Test dependencies
        testImplementation 'org.junit.jupiter:junit-jupiter:5.+'
        testImplementation "org.mockito:mockito-core:3.+"
        testImplementation 'org.assertj:assertj-core:3.+'
        testImplementation group: 'com.google.jimfs', name: 'jimfs', version: '1.+'
        testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.+'
        testImplementation 'org.projectlombok:lombok:1.+'
        testAnnotationProcessor 'org.projectlombok:lombok:1.+'
    }

    shadowJar {
        classifier = ''
        dependencies {
            include(dependency('com.google.inject:guice:'))
            include(dependency('org.apache.commons:commons-lang3:'))
        }
        relocate 'com.google.injection', "${packageName}.guice"
        relocate 'com.apache.commons', "${packageName}.commonslang"
    }

    tasks.build.dependsOn(shadowJar)
    tasks.publish.dependsOn(shadowJar)
    tasks.publish.finalizedBy(closeAndReleaseRepository)

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

configure(subprojects.findAll { it.name == 'art-bukkit' || it.name == 'art-example' }) {

    apply plugin: 'kr.entree.spigradle'

    spigot {
        name = "${project.property("pluginName")}"
        authors = [project.property("author")]
        apiVersion = project.property("apiVersion")
        load = STARTUP
    }

    dependencies {
        implementation "org.spigotmc:spigot-api:${mcVersion}-R0.1-SNAPSHOT"
    }

    task copyPluginYaml(type: Copy, dependsOn: spigotPluginYaml) {
        from(new File(spigotPluginYaml.temporaryDir, "plugin.yml"))
        into(sourceSets.test.resources.srcDirs[0])
    }

    task deploy(type: Copy, dependsOn: [
            'cleanPlugin',
            'jar'
    ]) {
        group 'deploy'
        description 'Exports you plugin to the plugin directory in your test server'

        def pluginFolder = project.property('pluginFolder').toString()

        from shadowJar
        into pluginFolder.isEmpty() ? "${project.rootDir}/working/plugins" : pluginFolder
    }

    task cleanPlugin() {
        group 'deploy'
        description 'Cleans the plugin in the working directory up'
        delete "${project.rootDir}/working/plugins/" + project.property("pluginName") + '*.jar'
    }

    task setupServer {
        group 'server'
        description 'Downloads the server jar'

        def server = new File("${project.rootDir}/working/server.jar")

        if (server.exists()) {
            server.delete()
        }

        def url = ''
        switch (mcVersion) {
            case '1.8.8':
                url = 'https://cdn.getbukkit.org/spigot/spigot-1.8.8-R0.1-SNAPSHOT-latest.jar'
                break

            case '1.12.2':
                url = 'https://cdn.getbukkit.org/spigot/spigot-1.12.2.jar'
                break

            case '1.13.2':
                url = 'https://cdn.getbukkit.org/spigot/spigot-1.13.2.jar'
                break

            case '1.14.4':
                url = 'https://cdn.getbukkit.org/spigot/spigot-1.14.4.jar'
                break
            case '1.15.2':
                url = 'https://cdn.getbukkit.org/spigot/spigot-1.15.2.jar'
                break
        }

        if (url.isEmpty()) {
            throw new Exception('NOT A SUPPORTED VERSION, PLEASE USE [1.8.8, 1.12.2, 1.13.2, 1.14.4, 1.15.2]!')
        }

        try {
            new URL(url).withInputStream { i -> server.withOutputStream { it << i } }
        } catch(Exception e) {
            println(e.getMessage())
        }
    }

    defaultTasks 'build', 'deploy'
}

defaultTasks 'build'