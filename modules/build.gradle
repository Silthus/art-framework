/*
 * Copyright 2020 ART-Framework Contributors (https://github.com/Silthus/art-framework)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id "io.freefair.lombok" version "5.3.0"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'io.freefair.lombok'

    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/publish.gradle"

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {

        //Test dependencies
        testImplementation 'org.junit.jupiter:junit-jupiter:5.+'
        testImplementation "org.mockito:mockito-core:3.+"
        testImplementation 'org.assertj:assertj-core:3.+'
        testImplementation 'org.awaitility:awaitility:4.0.3'
        testImplementation group: 'com.google.jimfs', name: 'jimfs', version: '1.+'
        testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.+'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    tasks.withType(Javadoc) {
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    defaultTasks 'build'
}

configure(subprojects.findAll {it.name != 'core'}) {

    dependencies {
        implementation project(':modules:core')
    }
}