plugins {
    id 'kr.entree.spigradle' version '1.2.1'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

spigot {
    authors = [project.property("author")]
    apiVersion = project.property("apiVersion")
    load = STARTUP
    //    depends = ['']
}

repositories {
    maven {
        name = 'slib'
        url = 'https://maven.pkg.github.com/silthus/slib'
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    implementation project(':art-core')

    implementation "org.spigotmc:spigot-api:${mcVersion}-R0.1-SNAPSHOT"

    implementation 'net.silthus:slib:1.1.2'
}

shadowJar {
    classifier = ''
    dependencies {
        include(dependency(':art-core'))
        include(dependency('net.silthus:slib:'))
    }
    relocate 'net.silthus.slib', "${packageName}.slib"
}

tasks.build.dependsOn(shadowJar)
tasks.publish.dependsOn(shadowJar)

task copyPluginYaml(type: Copy, dependsOn: spigotPluginYaml) {
    from(new File(spigotPluginYaml.temporaryDir, "plugin.yml"))
    into(sourceSets.test.resources.srcDirs[0])
}

task deploy(type: Copy, dependsOn: [
        'cleanPlugin',
        'jar'
]) {
    group 'deploy'
    description 'Exports you plugin to the plugin directory in your test server'

    def pluginFolder = project.property('pluginFolder').toString()

    from shadowJar
    into pluginFolder.isEmpty() ? "${project.rootDir}/working/plugins" : pluginFolder
}

task cleanPlugin() {
    group 'deploy'
    description 'Cleans the plugin in the working directory up'
    delete "${project.rootDir}/working/plugins/" + project.property("pluginName") + '*.jar'
}

task setupServer {
    group 'server'
    description 'Downloads the server jar'

    def server = new File("${project.rootDir}/working/server.jar")

    if (server.exists()) {
        server.delete()
    }

    def url = ''
    switch (mcVersion) {
        case '1.8.8':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.8.8-R0.1-SNAPSHOT-latest.jar'
            break

        case '1.12.2':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.12.2.jar'
            break

        case '1.13.2':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.13.2.jar'
            break

        case '1.14.4':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.14.4.jar'
            break
        case '1.15.2':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.15.2.jar'
            break
    }

    if (url.isEmpty()) {
        throw new GradleException('NOT A SUPPORTED VERSION, PLEASE USE [1.8.8, 1.12.2, 1.13.2, 1.14.4, 1.15.2]!')
    }

    new URL(url).withInputStream { i -> server.withOutputStream { it << i } }
}

defaultTasks 'build', 'deploy'